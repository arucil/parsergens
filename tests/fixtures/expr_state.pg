%user {
  use std::collections::BTreeMap;
}

%state {&mut BTreeMap<String, f64>}

%token PLUS "+"
%token MINUS "-"
%token MUL "*"
%token DIV "/"
%token POW "^"
%token LPAREN "("
%token RPAREN ")"
%token ASSIGN "="
%token SEMI ";"
%token NUMBER /\d+(\.\d*)?/
%token IDENT /[a-zA-Z]\w*/

%skip /[ \n]/

%left-assoc PLUS MINUS
%left-assoc MUL DIV
%right-assoc POW
%right-assoc NEG

%start stmt

stmt: {Result<(), String>} =
    ()  { Ok(()) }
  | assignment  { $1 }
  | assignment SEMI stmt { $1.and_then(|_| $3) }

assignment: {Result<(), String>} = IDENT ASSIGN expr
  {
    *state.entry($1.text.to_owned()).or_default() = $3?;
    Ok(())
  }

expr: {Result<f64, String>} =
    expr PLUS expr { $1.and_then(|x| $3.map(|y| x + y)) }
  | expr MINUS expr { $1.and_then(|x| $3.map(|y| x - y)) }
  | expr MUL expr { $1.and_then(|x| $3.map(|y| x * y)) }
  | expr DIV expr
    {
      $1.and_then(|x|
        $3.and_then(|y|
          if y == 0.0 {
            Err(format!("division by zero"))
          } else {
            Ok(x / y)
          }))
    }
  | expr POW expr { $1.and_then(|x| $3.map(|y| f64::powf(x, y))) }
  | factor { $1 }

factor: {Result<f64, String>} =
    MINUS expr %prec NEG { $2.map(|x| -x) }
  | LPAREN expr RPAREN { $2 }
  | NUMBER { $1.text.parse::<f64>().map_err(|err| err.to_string()) }
  | IDENT
    {
      state.get($1.text).cloned()
        .ok_or_else(|| format!("variable {} not found", $1.text))
    }