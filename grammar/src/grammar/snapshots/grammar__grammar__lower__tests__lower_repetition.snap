---
source: grammar/src/grammar/lower.rs
expression: lowered
---
LoweredGrammar {
    prods: [
        Production {
            nt: NonterminalId(
                2,
            ),
            kind: Ordinary,
            symbols: [],
        },
        Production {
            nt: NonterminalId(
                2,
            ),
            kind: Ordinary,
            symbols: [
                Token(
                    TokenId(
                        0,
                    ),
                ),
            ],
        },
        Production {
            nt: NonterminalId(
                3,
            ),
            kind: RepetitionFirst,
            symbols: [],
        },
        Production {
            nt: NonterminalId(
                3,
            ),
            kind: RepetitionRest,
            symbols: [
                Nonterminal(
                    NonterminalId(
                        3,
                    ),
                ),
                Nonterminal(
                    NonterminalId(
                        1,
                    ),
                ),
                Nonterminal(
                    NonterminalId(
                        2,
                    ),
                ),
            ],
        },
        Production {
            nt: NonterminalId(
                4,
            ),
            kind: RepetitionFirst,
            symbols: [
                Token(
                    TokenId(
                        0,
                    ),
                ),
                Nonterminal(
                    NonterminalId(
                        1,
                    ),
                ),
            ],
        },
        Production {
            nt: NonterminalId(
                4,
            ),
            kind: RepetitionRest,
            symbols: [
                Nonterminal(
                    NonterminalId(
                        4,
                    ),
                ),
                Token(
                    TokenId(
                        0,
                    ),
                ),
                Nonterminal(
                    NonterminalId(
                        1,
                    ),
                ),
            ],
        },
        Production {
            nt: NonterminalId(
                0,
            ),
            kind: Ordinary,
            symbols: [
                Token(
                    TokenId(
                        0,
                    ),
                ),
                Nonterminal(
                    NonterminalId(
                        3,
                    ),
                ),
                Token(
                    TokenId(
                        0,
                    ),
                ),
            ],
        },
        Production {
            nt: NonterminalId(
                0,
            ),
            kind: Ordinary,
            symbols: [
                Nonterminal(
                    NonterminalId(
                        4,
                    ),
                ),
            ],
        },
        Production {
            nt: NonterminalId(
                1,
            ),
            kind: Ordinary,
            symbols: [
                Token(
                    TokenId(
                        0,
                    ),
                ),
            ],
        },
        Production {
            nt: NonterminalId(
                1,
            ),
            kind: Ordinary,
            symbols: [],
        },
    ],
    start_nts: {
        NonterminalId(
            0,
        ),
    },
    nts: {NonterminalId(0) <> "top", NonterminalId(1) <> "atom", NonterminalId(2) <> "(A)?", NonterminalId(3) <> "(atom (A)?)*", NonterminalId(4) <> "(A atom)+"},
    nt_prods: {
        NonterminalId(
            2,
        ): 0..2,
        NonterminalId(
            3,
        ): 2..4,
        NonterminalId(
            4,
        ): 4..6,
        NonterminalId(
            0,
        ): 6..8,
        NonterminalId(
            1,
        ): 8..10,
    },
    lexer: Lexer {
        dfa: TabularDfa {
            start: 0,
            state_base: [
                0,
                0,
                0,
            ],
            transitions: [
                (
                    0,
                    0,
                ),
                (
                    0,
                    2,
                ),
            ],
            accept_states: {
                State(1): TokenId(
                    0,
                ),
            },
        },
        char_intervals: [
            0,
            97,
            98,
        ],
        tokens: {TokenId(0) <> "A"},
    },
}
