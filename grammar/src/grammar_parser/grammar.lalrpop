use lalrpop_util::ParseError;
use super::ast::*;
use super::lex;
use super::UserParseError;
use super::regex;

#[LALR]
grammar<'input>(input: &'input str);

pub Document: Grammar = (Separator <decl>)*
  => {
    <>.into_iter()
      .filter_map(|x| x)
      .collect()
  };

decl: Option<Spanned<Decl>> = {
  <l:@L> <decl:rule_decl> <r:@L> => Some(Spanned((l, r), Decl::Rule(decl))),
  <l:@L> <decl:start_decl> <r:@L> => Some(Spanned((l, r), Decl::Start(decl))),
  <l:@L> <decl:token_decl> <r:@L> => Some(Spanned((l, r), Decl::Token(decl))),
  <l:@L> <decl:ext_token_decl> <r:@L> => Some(Spanned((l, r), Decl::ExtToken(decl))),
  <l:@L> <decl:skip_decl> <r:@L> => Some(Spanned((l, r), Decl::Skip(decl))),
  <l:@L> <decl:user_decl> <r:@L> => Some(Spanned((l, r), Decl::User(decl))),
  <l:@L> <decl:assoc_decl> <r:@L> => Some(Spanned((l, r), Decl::Assoc(decl))),
  <l:@L> <decl:state_decl> <r:@L> => Some(Spanned((l, r), Decl::State(decl))),
};

rule_decl: RuleDecl =
  <name:ident> <ty:(Colon <code_block>)?> Assign <alt1:production> <mut alts:(Or <production>)*>
  =>? {
    alts.insert(0, alt1);
    if alts.iter().any(|alt| alt.1.action.is_some()) && ty.is_none() {
      Err(ParseError::User {
        error: UserParseError::MissingType(name.0),
      })
    } else {
      Ok(RuleDecl {
        name,
        ty,
        alts,
      })
    }
  }; 

production: Spanned<RuleAlt> = {
  <l:@L> <terms:term+> <prec:(Percent Prec <ident>)?> <action:code_block?> <r:@L> =>
    Spanned(
      (l, r),
      RuleAlt {
        terms: RuleAltTerms::Terms(terms),
        prec,
        action,
      }
    ),
  <l:@L> epsilon <action:code_block?> <r:@L> =>
    Spanned(
      (l, r),
      RuleAlt {
        terms: RuleAltTerms::Epsilon,
        prec: None,
        action,
      }
    ),
};

epsilon: () = LParen RParen;

term: Term = {
  ident => Term::Symbol(<>),
  LParen <terms:term+> RParen QuestionMark => Term::Optional(terms),
  LParen <terms:term+> RParen Asterisk => Term::Many(terms),
  LParen <terms:term+> RParen Plus => Term::Many1(terms),
}

start_decl: StartDecl = Percent Start <name:ident>
  => {
    StartDecl {
      name,
    }
  };

token_decl: TokenDecl = Percent Token <name:ident> <pattern:token_pattern>
  => {
    TokenDecl {
      name,
      pattern,
    }
  };

ext_token_decl: ExternalTokenDecl = Percent Token <name:ident>
  => {
    ExternalTokenDecl {
      name,
    }
  };

skip_decl: SkipDecl = Percent Skip <pattern:token_pattern>
  => {
    SkipDecl {
      pattern,
    }
  };

user_decl: UserDecl = Percent User <code:code_block>
  => {
    UserDecl {
      code,
    }
  };

assoc_decl: AssocDecl = Percent <assoc:assoc> <names:ident+>
  => {
    AssocDecl {
      names,
      assoc,
    }
  };

assoc: Spanned<Assoc> = {
  <l:@L> LeftAssoc <r:@L> => Spanned((l, r), Assoc::LeftAssoc),
  <l:@L> RightAssoc <r:@L> => Spanned((l, r), Assoc::RightAssoc),
  <l:@L> NonAssoc <r:@L> => Spanned((l, r), Assoc::NonAssoc),
}

state_decl: StateDecl = Percent State <state:code_block>
  => {
    StateDecl {
      state,
    }
  };

token_pattern: TokenPattern = {
  <regex:regex> =>? regex::parse_regex(
    &regex.1[1..regex.1.len() - 1],
    regex.0 .0 + 1
  )
    .map(|x| TokenPattern {
      kind: TokenPatternKind::Regex,
      source: regex,
      regex: x,
    })
    .map_err(|error| ParseError::User {
      error: UserParseError::RegexError(error),
    }),
  <str:string> =>? regex::parse_string_literal(
    &str.1[1..str.1.len() - 1], str.0 .0
  )
    .map(|x| TokenPattern {
      kind: TokenPatternKind::String,
      source: str,
      regex: x,
    })
    .map_err(|error| ParseError::User {
      error: UserParseError::RegexError(error)
    }),
}

spanned<T>: Spanned<String> = <l:@L> <x:T> <r:@L> => Spanned((l, r), x.text.to_owned());

ident = spanned<Ident>;
string = spanned<String>;
regex = spanned<Regex>;
code_block: Spanned<String> = <spanned<CodeBlock>> =>
  Spanned(<>.0, <>.1.trim_start_matches('{').trim_end_matches('}').trim().to_owned());

extern {
  type Location = usize;
  type Error = UserParseError;

  enum lex::Token<'input> {
    Start => lex::Token { kind: lex::TokenKind::Start, .. },
    Token => lex::Token { kind: lex::TokenKind::Token, .. },
    Skip => lex::Token { kind: lex::TokenKind::Skip, .. },
    User => lex::Token { kind: lex::TokenKind::User, .. },
    LeftAssoc => lex::Token { kind: lex::TokenKind::LeftAssoc, .. },
    RightAssoc => lex::Token { kind: lex::TokenKind::RightAssoc, .. },
    NonAssoc => lex::Token { kind: lex::TokenKind::NonAssoc, .. },
    Prec => lex::Token { kind: lex::TokenKind::Prec, .. },
    State => lex::Token { kind: lex::TokenKind::State, .. },

    Ident => lex::Token { kind: lex::TokenKind::Ident, .. },
    Regex => lex::Token { kind: lex::TokenKind::Regex, .. },
    String => lex::Token { kind: lex::TokenKind::String, .. },
    CodeBlock => lex::Token { kind: lex::TokenKind::CodeBlock, .. },

    Percent => lex::Token { kind: lex::TokenKind::Percent, .. },
    Assign => lex::Token { kind: lex::TokenKind::Assign, .. },
    Or => lex::Token { kind: lex::TokenKind::Or, .. },
    LParen => lex::Token { kind: lex::TokenKind::LParen, .. },
    RParen => lex::Token { kind: lex::TokenKind::RParen, .. },
    Comma => lex::Token { kind: lex::TokenKind::Comma, .. },
    Colon => lex::Token { kind: lex::TokenKind::Colon, .. },
    Asterisk => lex::Token { kind: lex::TokenKind::Asterisk, .. },
    QuestionMark => lex::Token { kind: lex::TokenKind::QuestionMark, .. },
    Plus => lex::Token { kind: lex::TokenKind::Plus, .. },
    Arrow => lex::Token { kind: lex::TokenKind::Arrow, .. },

    Enter => lex::Token { kind: lex::TokenKind::Enter, .. },
    Leave => lex::Token { kind: lex::TokenKind::Leave, .. },
    Separator => lex::Token { kind: lex::TokenKind::Separator, .. },
  }
}