---
source: lr/src/build_lalr.rs
expression: builder.states(&start_nts)
---
State 0 (start)
program -> . expr      $
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
_program -> . program      $

State 1
program -> expr .      $
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / $

State 2
type-id -> predef-type .      LBRACE
expr -> predef-type . LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 3
type-id -> IDENT .      LBRACE
lvalue -> IDENT . lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
lvalue-suffix -> .      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
lvalue-suffix -> . DOT IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
lvalue-suffix -> . LBRACK expr RBRACK lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> IDENT . LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> IDENT . LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 4
predef-type -> STRING .      EQ / ASSIGN / COMMA / LBRACE / RBRACE / RPAREN / LBRACK

State 5
predef-type -> INT .      EQ / ASSIGN / COMMA / LBRACE / RBRACE / RPAREN / LBRACK

State 6
expr -> lvalue .      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> lvalue . ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 7
expr -> NIL .      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 8
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> LPAREN . seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
seq-exprs -> .      RPAREN
seq-exprs -> . expr (SEMI expr)*      RPAREN

State 9
expr -> LIT_INT .      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 10
expr -> LIT_STR .      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 11
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> MINUS . expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 12
expr -> type-id . LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 13
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> IF . expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> IF . expr THEN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN

State 14
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> WHILE . expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO

State 15
expr -> FOR . IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 16
expr -> BREAK .      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 17
(decl)* -> .      TYPE / VAR / FUNCTION / IN
(decl)* -> . (decl)* decl      TYPE / VAR / FUNCTION / IN
decls -> . (decl)*      IN
expr -> LET . decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 18
_program -> program .      $

State 19
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr MOD . expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 20
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr DIV . expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 21
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr TIMES . expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 22
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr PLUS . expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 23
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr MINUS . expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 24
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr GT . expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 25
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr LT . expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 26
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr GE . expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 27
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr LE . expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 28
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr EQ . expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 29
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr NEQ . expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 30
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr AND . expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 31
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr OR . expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 32
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> predef-type LBRACK . expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK

State 33
lvalue -> IDENT lvalue-suffix .      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 34
lvalue-suffix -> DOT . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 35
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
lvalue-suffix -> LBRACK . expr RBRACK lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> IDENT LBRACK . expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK

State 36
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> IDENT LPAREN . arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
arg-exprs -> .      RPAREN
arg-exprs -> . expr (COMMA expr)*      RPAREN

State 37
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> lvalue ASSIGN . expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 38
expr -> LPAREN seq-exprs . RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 39
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
(SEMI expr)* -> .      SEMI / RPAREN / END
(SEMI expr)* -> . (SEMI expr)* SEMI expr      SEMI / RPAREN / END
seq-exprs -> expr . (SEMI expr)*      RPAREN / END

State 40
expr -> MINUS expr .      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 41
expr -> type-id LBRACE . field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
field-init-exprs -> .      RBRACE
field-init-exprs -> . IDENT EQ expr (COMMA IDENT EQ expr)*      RBRACE

State 42
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / THEN
expr -> IF expr . THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> IF expr . THEN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 43
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> WHILE expr . DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 44
expr -> FOR IDENT . ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 45
(decl)* -> (decl)* . decl      TYPE / VAR / FUNCTION / IN
decls -> (decl)* .      IN
decl -> . type-decl      TYPE / VAR / FUNCTION / IN
decl -> . var-decl      TYPE / VAR / FUNCTION / IN
decl -> . fun-decl      TYPE / VAR / FUNCTION / IN
type-decl -> . TYPE type-id EQ type      TYPE / VAR / FUNCTION / IN
var-decl -> . VAR IDENT (COLON type-id)? ASSIGN expr      TYPE / VAR / FUNCTION / IN
fun-decl -> . FUNCTION IDENT LPAREN type-fields RPAREN (COLON type-id)? EQ expr      TYPE / VAR / FUNCTION / IN

State 46
expr -> LET decls . IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 47
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr MOD expr .      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 48
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr DIV expr .      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 49
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr TIMES expr .      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 50
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr PLUS expr .      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 51
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr MINUS expr .      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 52
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr GT expr .      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 53
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr LT expr .      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 54
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr GE expr .      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 55
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr LE expr .      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 56
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr EQ expr .      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 57
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr NEQ expr .      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 58
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr AND expr .      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 59
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr OR expr .      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 60
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> predef-type LBRACK expr . RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 61
lvalue-suffix -> .      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
lvalue-suffix -> . DOT IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
lvalue-suffix -> DOT IDENT . lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
lvalue-suffix -> . LBRACK expr RBRACK lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 62
lvalue-suffix -> LBRACK expr . RBRACK lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> IDENT LBRACK expr . RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 63
expr -> IDENT LPAREN arg-exprs . RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 64
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
(COMMA expr)* -> .      COMMA / RPAREN
(COMMA expr)* -> . (COMMA expr)* COMMA expr      COMMA / RPAREN
arg-exprs -> expr . (COMMA expr)*      RPAREN

State 65
expr -> lvalue ASSIGN expr .      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 66
expr -> LPAREN seq-exprs RPAREN .      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 67
(SEMI expr)* -> (SEMI expr)* . SEMI expr      SEMI / RPAREN / END
seq-exprs -> expr (SEMI expr)* .      RPAREN / END

State 68
expr -> type-id LBRACE field-init-exprs . RBRACE      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 69
field-init-exprs -> IDENT . EQ expr (COMMA IDENT EQ expr)*      RBRACE

State 70
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> IF expr THEN . expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> IF expr THEN . expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 71
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> WHILE expr DO . expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 72
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> FOR IDENT ASSIGN . expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO

State 73
(decl)* -> (decl)* decl .      TYPE / VAR / FUNCTION / IN

State 74
decl -> type-decl .      TYPE / VAR / FUNCTION / IN

State 75
decl -> var-decl .      TYPE / VAR / FUNCTION / IN

State 76
decl -> fun-decl .      TYPE / VAR / FUNCTION / IN

State 77
type-decl -> TYPE . type-id EQ type      TYPE / VAR / FUNCTION / IN
type-id -> . predef-type      EQ
type-id -> . IDENT      EQ
predef-type -> . STRING      EQ
predef-type -> . INT      EQ

State 78
var-decl -> VAR . IDENT (COLON type-id)? ASSIGN expr      TYPE / VAR / FUNCTION / IN

State 79
fun-decl -> FUNCTION . IDENT LPAREN type-fields RPAREN (COLON type-id)? EQ expr      TYPE / VAR / FUNCTION / IN

State 80
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / END
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / END
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / END
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / END
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / END
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / END
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / END
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / END
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / END
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / END
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / END
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / END
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / END
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / END
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / END
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / END
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / END
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / END
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / END
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / END
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / END
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / END
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / END
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / END
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / END
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / END
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / END
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / END
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / END
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / END
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / END
expr -> LET decls IN . seq-exprs END      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
seq-exprs -> .      END
seq-exprs -> . expr (SEMI expr)*      END

State 81
expr -> predef-type LBRACK expr RBRACK . OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 82
lvalue-suffix -> DOT IDENT lvalue-suffix .      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 83
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
lvalue-suffix -> LBRACK . expr RBRACK lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK

State 84
lvalue-suffix -> .      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
lvalue-suffix -> . DOT IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
lvalue-suffix -> . LBRACK expr RBRACK lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
lvalue-suffix -> LBRACK expr RBRACK . lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> IDENT LBRACK expr RBRACK . OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 85
expr -> IDENT LPAREN arg-exprs RPAREN .      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 86
(COMMA expr)* -> (COMMA expr)* . COMMA expr      COMMA / RPAREN
arg-exprs -> expr (COMMA expr)* .      RPAREN

State 87
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
(SEMI expr)* -> (SEMI expr)* SEMI . expr      SEMI / RPAREN / END

State 88
expr -> type-id LBRACE field-init-exprs RBRACE .      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 89
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
field-init-exprs -> IDENT EQ . expr (COMMA IDENT EQ expr)*      RBRACE

State 90
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> IF expr THEN expr . ELSE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> IF expr THEN expr .      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 91
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> WHILE expr DO expr .      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 92
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TO
expr -> FOR IDENT ASSIGN expr . TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 93
type-decl -> TYPE type-id . EQ type      TYPE / VAR / FUNCTION / IN

State 94
type-id -> predef-type .      EQ / ASSIGN / COMMA / RBRACE / RPAREN

State 95
type-id -> IDENT .      EQ / ASSIGN / COMMA / RBRACE / RPAREN

State 96
(COLON type-id)? -> .      ASSIGN
(COLON type-id)? -> . COLON type-id      ASSIGN
var-decl -> VAR IDENT . (COLON type-id)? ASSIGN expr      TYPE / VAR / FUNCTION / IN

State 97
fun-decl -> FUNCTION IDENT . LPAREN type-fields RPAREN (COLON type-id)? EQ expr      TYPE / VAR / FUNCTION / IN

State 98
expr -> LET decls IN seq-exprs . END      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 99
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> predef-type LBRACK expr RBRACK OF . expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 100
lvalue-suffix -> LBRACK expr . RBRACK lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACK

State 101
lvalue-suffix -> LBRACK expr RBRACK lvalue-suffix .      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 102
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> IDENT LBRACK expr RBRACK OF . expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 103
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
(COMMA expr)* -> (COMMA expr)* COMMA . expr      COMMA / RPAREN

State 104
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN / END
(SEMI expr)* -> (SEMI expr)* SEMI expr .      SEMI / RPAREN / END

State 105
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
(COMMA IDENT EQ expr)* -> .      COMMA / RBRACE
(COMMA IDENT EQ expr)* -> . (COMMA IDENT EQ expr)* COMMA IDENT EQ expr      COMMA / RBRACE
field-init-exprs -> IDENT EQ expr . (COMMA IDENT EQ expr)*      RBRACE

State 106
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> IF expr THEN expr ELSE . expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 107
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> FOR IDENT ASSIGN expr TO . expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO

State 108
type-decl -> TYPE type-id EQ . type      TYPE / VAR / FUNCTION / IN
type -> . IDENT      TYPE / VAR / FUNCTION / IN
type -> . LBRACE type-fields RBRACE      TYPE / VAR / FUNCTION / IN

State 109
type-id -> . predef-type      ASSIGN
type-id -> . IDENT      ASSIGN
predef-type -> . STRING      ASSIGN
predef-type -> . INT      ASSIGN
(COLON type-id)? -> COLON . type-id      ASSIGN

State 110
var-decl -> VAR IDENT (COLON type-id)? . ASSIGN expr      TYPE / VAR / FUNCTION / IN

State 111
type-fields -> .      RPAREN
type-fields -> . IDENT COLON type-id (COMMA IDENT COLON type-id)*      RPAREN
fun-decl -> FUNCTION IDENT LPAREN . type-fields RPAREN (COLON type-id)? EQ expr      TYPE / VAR / FUNCTION / IN

State 112
expr -> LET decls IN seq-exprs END .      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 113
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> predef-type LBRACK expr RBRACK OF expr .      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 114
lvalue-suffix -> .      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
lvalue-suffix -> . DOT IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
lvalue-suffix -> . LBRACK expr RBRACK lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
lvalue-suffix -> LBRACK expr RBRACK . lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 115
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> IDENT LBRACK expr RBRACK OF expr .      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 116
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RPAREN
(COMMA expr)* -> (COMMA expr)* COMMA expr .      COMMA / RPAREN

State 117
(COMMA IDENT EQ expr)* -> (COMMA IDENT EQ expr)* . COMMA IDENT EQ expr      COMMA / RBRACE
field-init-exprs -> IDENT EQ expr (COMMA IDENT EQ expr)* .      RBRACE

State 118
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> IF expr THEN expr ELSE expr .      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 119
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / DO
expr -> FOR IDENT ASSIGN expr TO expr . DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 120
type-decl -> TYPE type-id EQ type .      TYPE / VAR / FUNCTION / IN

State 121
type -> IDENT .      TYPE / VAR / FUNCTION / IN

State 122
type -> LBRACE . type-fields RBRACE      TYPE / VAR / FUNCTION / IN
type-fields -> .      RBRACE
type-fields -> . IDENT COLON type-id (COMMA IDENT COLON type-id)*      RBRACE

State 123
(COLON type-id)? -> COLON type-id .      ASSIGN

State 124
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
var-decl -> VAR IDENT (COLON type-id)? ASSIGN . expr      TYPE / VAR / FUNCTION / IN
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN

State 125
type-fields -> IDENT . COLON type-id (COMMA IDENT COLON type-id)*      RBRACE / RPAREN

State 126
fun-decl -> FUNCTION IDENT LPAREN type-fields . RPAREN (COLON type-id)? EQ expr      TYPE / VAR / FUNCTION / IN

State 127
(COMMA IDENT EQ expr)* -> (COMMA IDENT EQ expr)* COMMA . IDENT EQ expr      COMMA / RBRACE

State 128
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> FOR IDENT ASSIGN expr TO expr DO . expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 129
type -> LBRACE type-fields . RBRACE      TYPE / VAR / FUNCTION / IN

State 130
var-decl -> VAR IDENT (COLON type-id)? ASSIGN expr .      TYPE / VAR / FUNCTION / IN
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN

State 131
type-fields -> IDENT COLON . type-id (COMMA IDENT COLON type-id)*      RBRACE / RPAREN
type-id -> . predef-type      COMMA / RBRACE / RPAREN
type-id -> . IDENT      COMMA / RBRACE / RPAREN
predef-type -> . STRING      COMMA / RBRACE / RPAREN
predef-type -> . INT      COMMA / RBRACE / RPAREN

State 132
(COLON type-id)? -> .      EQ
(COLON type-id)? -> . COLON type-id      EQ
fun-decl -> FUNCTION IDENT LPAREN type-fields RPAREN . (COLON type-id)? EQ expr      TYPE / VAR / FUNCTION / IN

State 133
(COMMA IDENT EQ expr)* -> (COMMA IDENT EQ expr)* COMMA IDENT . EQ expr      COMMA / RBRACE

State 134
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $
expr -> FOR IDENT ASSIGN expr TO expr DO expr .      EQ / NEQ / LT / GT / LE / GE / COMMA / SEMI / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE / RPAREN / RBRACK / TYPE / VAR / FUNCTION / THEN / ELSE / TO / DO / IN / END / $

State 135
type -> LBRACE type-fields RBRACE .      TYPE / VAR / FUNCTION / IN

State 136
(COMMA IDENT COLON type-id)* -> .      COMMA / RBRACE / RPAREN
(COMMA IDENT COLON type-id)* -> . (COMMA IDENT COLON type-id)* COMMA IDENT COLON type-id      COMMA / RBRACE / RPAREN
type-fields -> IDENT COLON type-id . (COMMA IDENT COLON type-id)*      RBRACE / RPAREN

State 137
type-id -> . predef-type      EQ
type-id -> . IDENT      EQ
predef-type -> . STRING      EQ
predef-type -> . INT      EQ
(COLON type-id)? -> COLON . type-id      EQ

State 138
fun-decl -> FUNCTION IDENT LPAREN type-fields RPAREN (COLON type-id)? . EQ expr      TYPE / VAR / FUNCTION / IN

State 139
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
(COMMA IDENT EQ expr)* -> (COMMA IDENT EQ expr)* COMMA IDENT EQ . expr      COMMA / RBRACE

State 140
(COMMA IDENT COLON type-id)* -> (COMMA IDENT COLON type-id)* . COMMA IDENT COLON type-id      COMMA / RBRACE / RPAREN
type-fields -> IDENT COLON type-id (COMMA IDENT COLON type-id)* .      RBRACE / RPAREN

State 141
(COLON type-id)? -> COLON type-id .      EQ

State 142
type-id -> . predef-type      LBRACE
type-id -> . IDENT      LBRACE
predef-type -> . STRING      LBRACE / LBRACK
predef-type -> . INT      LBRACE / LBRACK
fun-decl -> FUNCTION IDENT LPAREN type-fields RPAREN (COLON type-id)? EQ . expr      TYPE / VAR / FUNCTION / IN
lvalue -> . IDENT lvalue-suffix      EQ / NEQ / LT / GT / LE / GE / ASSIGN / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . lvalue      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . lvalue ASSIGN expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . NIL      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . LPAREN seq-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . LIT_INT      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . LIT_STR      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . MINUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . IDENT LPAREN arg-exprs RPAREN      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . expr MOD expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . expr DIV expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . expr TIMES expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . expr PLUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . expr MINUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . expr GT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . expr LT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . expr GE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . expr LE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . expr EQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . expr NEQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . expr AND expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . expr OR expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . type-id LBRACE field-init-exprs RBRACE      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . IDENT LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . predef-type LBRACK expr RBRACK OF expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . IF expr THEN expr ELSE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . IF expr THEN expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . WHILE expr DO expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . FOR IDENT ASSIGN expr TO expr DO expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . BREAK      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> . LET decls IN seq-exprs END      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN

State 143
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / COMMA / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / RBRACE
(COMMA IDENT EQ expr)* -> (COMMA IDENT EQ expr)* COMMA IDENT EQ expr .      COMMA / RBRACE

State 144
(COMMA IDENT COLON type-id)* -> (COMMA IDENT COLON type-id)* COMMA . IDENT COLON type-id      COMMA / RBRACE / RPAREN

State 145
fun-decl -> FUNCTION IDENT LPAREN type-fields RPAREN (COLON type-id)? EQ expr .      TYPE / VAR / FUNCTION / IN
expr -> expr . MOD expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> expr . DIV expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> expr . TIMES expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> expr . PLUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> expr . MINUS expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> expr . GT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> expr . LT expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> expr . GE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> expr . LE expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> expr . EQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> expr . NEQ expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> expr . AND expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN
expr -> expr . OR expr      EQ / NEQ / LT / GT / LE / GE / PLUS / MINUS / TIMES / DIV / MOD / AND / OR / TYPE / VAR / FUNCTION / IN

State 146
(COMMA IDENT COLON type-id)* -> (COMMA IDENT COLON type-id)* COMMA IDENT . COLON type-id      COMMA / RBRACE / RPAREN

State 147
(COMMA IDENT COLON type-id)* -> (COMMA IDENT COLON type-id)* COMMA IDENT COLON . type-id      COMMA / RBRACE / RPAREN
type-id -> . predef-type      COMMA / RBRACE / RPAREN
type-id -> . IDENT      COMMA / RBRACE / RPAREN
predef-type -> . STRING      COMMA / RBRACE / RPAREN
predef-type -> . INT      COMMA / RBRACE / RPAREN

State 148
(COMMA IDENT COLON type-id)* -> (COMMA IDENT COLON type-id)* COMMA IDENT COLON type-id .      COMMA / RBRACE / RPAREN


