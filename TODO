grammar:

- [ ] lexer mode
- [ ] executable DFA instead of table-based
- [ ] reduce the check of EOF in DFA: *RE2C: A more versatile scanner generator*.
- [x] support layout syntax for grammar parser
- [x] %left-assoc %right-assoc %non-assoc, precedence
- [x] non-terminal kind: anonymous (merge children into parent)
- [ ] ~~alt operator in production~~
- [x] identifier support ' -, remove support of _
- [x] semantic action (plus user import part)
- [ ] function non-terminal
- [x] move 'lower' to method of Grammar
- [ ] ~~add label to sub-rule~~
- [x] user state
- [x] support lifetime in user state. allow omitting lifetime parameter, auto gen
- [x] move semantic action and type parsing to grammar
- [ ] ~~generate parser through build.rs~~
- [x] integration test in release mode
- [x] LALR state: (prod, dot, BitSet), BitSet doesn't take part in Eq, Hash etc
- [ ] error reporting
- [x] use raw identifiers in generated code
- [x] assign prec to token or production
- [ ] literal token
- [ ] use minimal integer type in generated code
- [ ] improve DFA table compression
- [x] merge ACCEPT into REDUCE
- [ ] parse_expr().with_input()
- [x] test S -> xx S | epsilon
- [x] reduce code redundancy in LALR builder and CLR builder
- [x] Production no need to contains Assoc
- [x] lookahead set fixed length (num_tokens), Vec<u32>
- [ ] use dispatch table instead of `match` for semantc action
- [x] test multiple entry point
- [ ] merge unit production semantic type
- [x] executable
- [ ] ACTION_DEFAULT always reduce or error, no need to turn reduce negative